pipeline {
    agent any

    tools {
        /* Use the Maven tool defined in Jenkins Global Tool Configuration */
        maven 'maven'  /* Replace with the name of your Maven installation in Jenkins */
        jdk 'JDK-17'
    }
    environment {
        // Define environment variables
        DOCKER_IMAGE_NAME = 'my-java-app'
        DOCKER_IMAGE_TAG = 'latest'
        dockerHubUser= 'muralidharan2705'       
    }

   /* environment {

        docker_image = "Test-App"
        tag_name = "latest"
      } */  

    stages {
        stage('Checkout') {
            steps {
                // Checkout code from your repository
                //git 'https://github.com/Muralidharan2705/Test-App.git'  // Replace with your repo URL
                sh 'echo passed'
            }
        }

        stage('Build and Package') {
            steps {
                script {
                    echo 'Running Maven clean and package...'
                    sh "${tool 'maven'}/bin/mvn clean package"  // Corrected command
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                archiveArtifacts artifacts: '**/target/*.jar', allowEmptyArchive: true
            }
        }
        stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image with the JAR inside
                    sh '''
                    docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} .
                    '''
                }
            }
        }
        stage ('Push docker image') {
         steps {
             scripts {
                   
                          withCredentials([string(credentialsId: 'Docker-Hub', variable: 'DOCKER_HUB_PASSWORD')]){
                     sh "docker login -u ${dockerHubUser} -p ${DOCKER_HUB_PASSWORD}"
                        
                        // Tag and push the Docker image to Docker Hub
                        sh "docker tag ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} ${dockerHubUser}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
                        sh "docker push ${dockerHubUser}/${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG}"
					}
				}
                           }
			}    
      }


    post {
        always {
            echo 'Cleaning up...'
        }

        success {
            echo 'Build and packaging completed successfully!'
        }

        failure {
            echo 'Build failed. Check the logs for errors!'
        }
    }
}
