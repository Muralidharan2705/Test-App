pipeline {
    agent any
   
     tools {
        /* Use the Maven tool defined in Jenkins Global Tool Configuration */
        maven 'maven'  /* Replace with the name of your Maven installation in Jenkins */
        jdk 'JDK-17'
    }
    environment {
        // Define environment variables
        DOCKER_IMAGE_NAME = 'muralidharan2705/my-java-app'
        DOCKER_IMAGE_TAG = 'latest'
        dockerHubUser= 'muralidharan2705'
        SCANNER_HOME= tool 'SonarQube'
        SONAR_HOST_URL = 'http://35.223.93.214:9000/'
        SONAR_LOGIN = 'sonar-login'

    } 

   stages {
        stage('Checkout') {
            steps {
                // Checkout code from your repository
                git branch: 'main', url: 'https://github.com/Muralidharan2705/Test-App.git'  // Replace with your repo URL
                sh 'echo passed'
            }
        }  
      stage('SonarQube analysis') {
            environment {
                SCANNER_HOME = tool 'SonarQubeScanner';    
            }
            
            steps {
                
                withSonarQubeEnv('SonarQube') {
                    sh "${SCANNER_HOME}/bin/sonar-scanner"
                }
            }
        }
       

         stage('Build and Package') {
            steps {
                script {
                    echo 'Running Maven clean and package...'
                    sh "${tool 'maven'}/bin/mvn clean package"  // Corrected command
                }
            }
        }

        stage('Archive Artifacts') {
            steps {
                archiveArtifacts artifacts: '**/target/*.jar', allowEmptyArchive: true
            }
        }
     stage('Build Docker Image') {
            steps {
                script {
                    // Build the Docker image with the JAR inside
                    sh '''
                    docker build -t ${DOCKER_IMAGE_NAME}:${DOCKER_IMAGE_TAG} .
                     '''
                }
            }
        }
   
      stage('Push Image'){
        environment{
                        DOCKER_HUB = credentials('docker-hub-credentials')
             // we created env variable docker hub to read credentials from jenkin
                    }
            steps{
               sh 'echo ${DOCKER_HUB_PSW} | docker login -u ${DOCKER_HUB_USR} --password-stdin'
               sh "docker push muralidharan2705/my-java-app"
            }
        }
     
    }
post {
        always {
           echo 'Cleaning up workspace....'
            //cleanWs()

        }

        success {
            echo 'Build and packaging completed successfully!'
        }

        failure {
            echo 'Build failed. Check the logs for errors!'
        }
    }
}

